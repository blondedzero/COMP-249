//-------------------------------------------------------------------
// Part: 1
// Written by: Kaila Quimson (40240746) & Nicholas Chamoun (40264135)
//-------------------------------------------------------------------

package Driver;

import P1.Airplane;
import P2.Helicopter;
import P2.Quadcopter;
import P3.Multirotor;
import P4.UAV;
import P5.AgriculturalDrone;
import P5.MAV;

import java.util.Scanner;

public class Driver2 {

    static Scanner s = new Scanner(System.in);
    
    //copyFlyingObjects method
    public static Object[] copyFlyingObjects(Object[] storage) {

        //creating duplicate array object
        Object[] duplicate_storage = new Object[storage.length];
        //creating deep copy
        if (storage.length == 0) {
        	System.out.println("There are no flying objects  to duplicate... Please try again later.");
            System.exit(0);
        }
        
        for (int i = 0; i < storage.length; i++) {
        	boolean check = false;
        	while(!check)
        		if (storage[i] instanceof Airplane) {
        			duplicate_storage[i] = new Airplane((Airplane) storage[i]);
        			check = true;
        			break;
        		}
        		if (storage[i] instanceof Helicopter) {
            		duplicate_storage[i] = new Helicopter((Helicopter) storage[i]);
            		check = true;
            		break;
        		}
            	if (storage[i] instanceof Quadcopter) {
                	duplicate_storage[i] = new Quadcopter((Quadcopter) storage[i]);
                	check = true;
                	break;
            	}
                if (storage[i] instanceof Multirotor) {
                	duplicate_storage[i] = new Multirotor((Multirotor) storage[i]);
                	check = true;
                	break;
                }
                if (storage[i] instanceof UAV) {
                	duplicate_storage[i] = new UAV ((UAV) storage[i]);
                	check = true;
                	break;
                }
                if (storage[i] instanceof AgriculturalDrone) {
                	duplicate_storage[i] = new UAV ((AgriculturalDrone) storage[i]);
                	check = true;
                	break;
                }
                if (storage[i] instanceof MAV) {
                	duplicate_storage[i] = new UAV ((MAV) storage[i]);
                	check = true;
                	break;
                }	
            }
        return duplicate_storage;
        }
    
    public static void main(String[] args) {

        //array to store aircrafts
        Object[] storage = new Airplane[15];
    	
        //initializing aircraft objects
        storage[0] = new Airplane();
        storage[1] = new Airplane("Airbus", 110000000, 75000);
        storage[2] = new Airplane();
        storage[3] = new Helicopter("Robinson", 300000, 160, 4, 1979, 2);
        storage[4] = new Helicopter("Robinson", 500000, 245, 6, 1992, 4);
        storage[5] = new Quadcopter("Ehang", 200000, 203, 4, 2021, 4, 130);
        storage[6] = new Quadcopter("Volocopter", 300000, 134, 4, 2017, 2, 100);
        storage[7] = new Multirotor("Volocopter", 500000, 134, 4, 2017, 2, 18);
        storage[8] = new Multirotor("Workhorse SureFly", 500000, 134, 4, 2017, 2, 18);
        storage[9] = new UAV(6.3,13200);
        storage[10] = new UAV(1.39, 8000);
        storage[11] = new AgriculturalDrone(9.5, 15000,"DJI", 30);
        storage[12] = new AgriculturalDrone(2.4, 1500,"Parrot", 5);
        storage[13] = new MAV(1.9, 35000, "Raven", 1.2);
        storage[14] = new MAV(0.2, 130, "Mambo Fly", 0.32);
        
        //welcome message
        System.out.println("Welcome to the Aircraft Storage Duplicator Program!");
        System.out.println("Type \"Duplicate\" to duplicate the aircrafts in the original storage unit.");
        System.out.println("Type here: ");

        String choice = s.next();

        if (choice.equalsIgnoreCase("Duplicate")) {
           
        	//printing deep copy
            System.out.println("Here are the contents of the original aircraft storage unit:");
            //turning deep copy into a string
            for (int i = 0; i < storage.length; i++) {
            	System.out.println(storage[i]);
            }
            
            //printing deep copy
            System.out.println("Here are the contents of the duplicated aircraft storage unit:");
            //turning deep copy into a string
            for (int j = 0; j < storage.length; j++) {
            	System.out.println(storage.copyFlyingObjects(storage));
            }
        }
        
        else { 
            System.out.println("Invalid response...try again later.");
            System.exit(0);
        }  
    }   
}
